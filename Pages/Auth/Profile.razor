@page "/Profile"
@using kuro_desserts.Services
@using kuro_desserts.Models
@using Microsoft.AspNetCore.Components
@using System.Net
@using System.Net.Http.Headers
@using System.Text.Json
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime;

<PageTitle>Profile</PageTitle>

<h3>Your profile</h3>
<EditForm Model="@_user" class="form-control bg-transparent border-0 p-5 py-0" OnValidSubmit="UpdateUser" OnInvalidSubmit="ShowError">
    <div class="container">
        <img class="img-fluid" alt="Profile photo" src="https://robohash.org/@LoggedUser!.Username?size=200x200"/>
    </div>
    <label class="form-label">Username</label>
    <div class="input-group">
        <span class="input-group-text">@@</span>
        <InputText @bind-Value="_user.Username" class="form-control"></InputText>
        <ValidationMessage For="@(() => _user.Username)"></ValidationMessage>
    </div>

    @if (_isError)
    {
        <p class="text-danger mb-0">@_errorMessage</p>
    }

    <button class="btn btn-primary mt-3" type="submit" disabled="@_isSubmitting">Update</button>

    @* Enable data validation  *@
    <DataAnnotationsValidator/>
</EditForm>
<div>
    <button class="btn btn-info mt-3" disabled="@_isSubmitting" @onclick="ShowAddressesModal">Manage your addresses</button>
    <button class="btn btn-danger mt-3" disabled="@_isSubmitting" @onclick="ShowDeleteModal">Delete User</button>
</div>

@if (_showingDeleteUserModal)
{
    <DeleteUserModal OnCancel="HideDeleteUserModal" OnConfirm="DeleteUser"/>
}

@if (_showingAddressesModal)
{
    <ManageAddressesModal Addresses="_addresses" OnCancel="HideAddressesModal"/>
}

@code {
    private User? LoggedUser => AuthService.LoggedUser;
    private readonly User _user = new();
    string? _token;

    bool _isError;
    bool _isSubmitting;
    string _errorMessage = "Please review the form.";

    private bool _showingDeleteUserModal;
    private bool _showingAddressesModal;

    private Address[]? _addresses;

    protected override void OnInitialized()
    {
        if (LoggedUser == null)
        {
            NavigationManager.NavigateTo("/");
        }
        _user.Username = LoggedUser!.Username;
        _user.Password = "password123";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _token = await JsRuntime.InvokeAsync<string?>("ReadCookie.ReadCookie", "token");
            StateHasChanged();
        }
    }

    async Task UpdateUser()
    {
        _isError = false;
        _isSubmitting = true;

        HttpClient.DefaultRequestHeaders.Authorization = AuthenticationHeaderValue.Parse(_token);
        var response = await HttpClient.PutAsJsonAsync($"{NavigationManager.BaseUri}api/auth", _user);
        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            _errorMessage = response.Content.ReadAsStringAsync().Result.Trim('"');
            _isError = true;
            _isSubmitting = false;
            return;
        }
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    async Task DeleteUser()
    {
        HttpClient.DefaultRequestHeaders.Authorization = AuthenticationHeaderValue.Parse(_token);
        await HttpClient.DeleteAsync($"{NavigationManager.BaseUri}api/auth");
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ShowError()
    {
        _isError = true;
    }

    private void ShowDeleteModal()
    {
        _showingDeleteUserModal = true;
    }

    private void HideDeleteUserModal()
    {
        _showingDeleteUserModal = false;
    }

    private async Task ShowAddressesModal()
    {
        HttpClient.DefaultRequestHeaders.Authorization = AuthenticationHeaderValue.Parse(_token);
        try
        {
            _addresses = await HttpClient.GetFromJsonAsync<Address[]>($"{NavigationManager.BaseUri}api/addresses");
        }
        catch (JsonException)
        {
            _addresses = null;
        }
        _showingAddressesModal = true;
    }

    private void HideAddressesModal()
    {
        _showingAddressesModal = false;
    }

}