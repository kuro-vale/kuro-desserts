@using kuro_desserts.Services
@using kuro_desserts.Models
@inject IJSRuntime JsRuntime;
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<header class="mb-auto">
    <div>
        <h3 class="float-md-start mb-0">Kuro Desserts</h3>
        <nav class="nav nav-masthead justify-content-center float-md-end">
            <NavLink class="nav-link fw-bold py-1 px-0" Match="NavLinkMatch.All" href="/">Home</NavLink>
            <NavLink class="nav-link fw-bold py-1 px-0" href="/desserts">Desserts</NavLink>
            @if (LoggedUser != null)
            {
                <NavLink class="nav-link fw-bold py-1 px-0" href="/orders">My Orders</NavLink>
                <NavLink class="nav-link fw-bold py-1 px-0" href="/profile">Profile</NavLink>
                <p class="nav-link fw-bold py-1 px-0" @onclick="ShowModal">Logout</p>
            }
            else
            {
                <NavLink class="nav-link fw-bold py-1 px-0" href="/register">Register</NavLink>
                <NavLink class="nav-link fw-bold py-1 px-0" href="/login">Login</NavLink>
            }
        </nav>
    </div>
</header>

@* Logout Modal *@
<div class="modal @(_modalShowed ? "show" : "")" style="@(_modalShowed ? "display: block;" : "display: none;")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">We will miss you 🥺</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                Do you want to logout?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary text-white" @onclick="HideModal">Close</button>
                <button type="button" class="btn btn-danger" @onclick="ClearToken">Logout</button>
            </div>
        </div>
    </div>
</div>

<div class="@(_modalShowed ? "modal-backdrop show" : "")"></div>

@code
{
    private User? LoggedUser => AuthService.LoggedUser;
    private bool _modalShowed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JsRuntime.InvokeAsync<string?>("ReadCookie.ReadCookie", "token");
            if (token != null)
            {
                AuthService.SetUser(token);
            }
            StateHasChanged();
        }
    }

    private async void ClearToken()
    {
        await JsRuntime.InvokeVoidAsync("WriteCookie.ClearToken");
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ShowModal()
    {
        _modalShowed = true;
    }

    private void HideModal()
    {
        _modalShowed = false;
    }
}