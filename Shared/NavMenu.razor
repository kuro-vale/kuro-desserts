@using kuro_desserts.Services
@using kuro_desserts.Models
@inject IJSRuntime JsRuntime;
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject CartService CartService
@inject MessageService MessageService

<header class="mb-auto">
    <div>
        <h3 class="float-md-start mb-0">Kuro Desserts</h3>
        <nav class="nav nav-masthead justify-content-center float-md-end">
            <NavLink class="nav-link fw-bold py-1 px-0" Match="NavLinkMatch.All" href="/">Home</NavLink>
            <NavLink class="nav-link fw-bold py-1 px-0" href="/desserts">Desserts</NavLink>
            @if (LoggedUser != null)
            {
                <NavLink class="nav-link fw-bold py-1 px-0" href="/orders">My Orders</NavLink>
                <NavLink class="nav-link fw-bold py-1 px-0" href="/profile">Profile</NavLink>
                <p class="nav-link fw-bold py-1 px-0" @onclick="ShowModal">Logout</p>
                <NavLink class="nav-link py-1 px-0 position-relative" href="/cart">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                        <path d="M8 9h-7.161l-.839-2h8v2zm0 2h-6.322l.839 2h5.483v-2zm8.53-4h-6.53v2h5.966l.564-2zm-1.694 6l.564-2h-5.4v2h4.836zm-6.336 5c-.828 0-1.5.672-1.5 1.5 0 .829.672 1.5 1.5 1.5s1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5zm11.305-15l-3.432 12h-13.017l.839 2h13.659l3.474-12h1.929l.743-2h-4.195zm-6.305 15c-.828 0-1.5.671-1.5 1.5s.672 1.5 1.5 1.5 1.5-.671 1.5-1.5c0-.828-.672-1.5-1.5-1.5z"/>
                    </svg>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @Cart.Orders!.Count
                        <span class="visually-hidden">desserts in cart</span>
                    </span>
                </NavLink>
            }
            else
            {
                <NavLink class="nav-link fw-bold py-1 px-0" href="/register">Register</NavLink>
                <NavLink class="nav-link fw-bold py-1 px-0" href="/login">Login</NavLink>
            }
        </nav>
    </div>
</header>

@* Logout Modal *@
<div class="modal @(_modalShowed ? "show" : "")" style="@(_modalShowed ? "display: block;" : "display: none;")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">We will miss you 🥺</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                Do you want to logout?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary text-white" @onclick="HideModal">Close</button>
                <button type="button" class="btn btn-danger" @onclick="ClearToken">Logout</button>
            </div>
        </div>
    </div>
</div>

<div class="@(_modalShowed ? "modal-backdrop show" : "")"></div>

@code
{
    private User? LoggedUser => AuthService.LoggedUser;
    private Cart Cart => CartService.Cart;
    private bool _modalShowed = false;

    protected override void OnInitialized()
    {
        MessageService.OnMessage += MessageHandler;
    }

    private void MessageHandler()
    {
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JsRuntime.InvokeAsync<string?>("ReadCookie.ReadCookie", "token");
            if (token != null)
            {
                AuthService.SetUser(token);
            }
            StateHasChanged();
        }
    }

    private async void ClearToken()
    {
        await JsRuntime.InvokeVoidAsync("WriteCookie.ClearToken");
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void ShowModal()
    {
        _modalShowed = true;
    }

    private void HideModal()
    {
        _modalShowed = false;
    }
}