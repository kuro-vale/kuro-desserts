@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject CartService CartService
@using kuro_desserts.Models
@using kuro_desserts.Services

<div class="modal show" style="display: block;">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Order.Dessert!.Name</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            @if (LoggedUser != null)
            {
                <div class="modal-body">
                    <label class="form-label">Size:</label>
                    <span class="badge text-bg-info">@Order.Size oz</span>
                    <input type="range" class="form-range" min="9" max="24" @bind="Order.Size" @bind:event="oninput">
                    <p class="text-danger text-start mb-0 mx-3 mt-3">*required</p>
                    <select class="form-select mb-3" @onchange="SelectFlavor">
                        <option value="" selected>Select your flavor</option>
                        @if (_flavors != null)
                        {
                            @foreach (var flavor in _flavors)
                            {
                                <option value="@flavor.Id">@flavor.Name</option>
                            }
                        }
                        else
                        {
                            <option>Sorry we have no flavors available at this moment ☹</option>
                        }
                    </select>
                    @if (Order.Toppings!.Any())
                    {
                        <p class="my-1">Toppings added</p>
                        <table class="table">
                            <tbody>
                            @foreach (var topping in Order.Toppings!)
                            {
                                <tr>
                                    <td>@topping.Topping!.Name</td>
                                    <td>
                                        <span class="badge text-bg-success">@topping.Topping.Price.ToString("C0")</span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveTopping(topping)">Remove</button>
                                    </td>
                                </tr>
                            }
                            <tr>
                                <td>Toppings price:</td>
                                <td>
                                    <span class="badge text-bg-success">@Order.GetToppingsPrice().ToString("C0")</span>
                                </td>
                                <td></td>
                            </tr>
                            </tbody>
                        </table>
                    }
                    <p class="my-1">Do you want to add toppings to your order?</p>
                    <select class="form-select" @onchange="AddTopping">
                        <option value="" selected>Add a new topping</option>
                        @if (_toppings != null)
                        {
                            @foreach (var topping in _toppings)
                            {
                                <option value="@topping.Id">@topping.Name @topping.Price.ToString("C0")</option>
                            }
                        }
                        else
                        {
                            <option>Sorry we have no toppings available at this moment ☹</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <h5>Price: <span class="badge text-bg-success">@Order.GetTotalPrice().ToString("C")</span></h5>
                    <button type="button" class="btn btn-secondary text-white" @onclick="OnCancel">Cancel</button>
                    <button type="button" class="btn btn-success @(!_flavorSelected ? "disabled" : "")" @onclick="OnConfirm">Add to Cart</button>
                </div>
            }
            else
            {
                <div class="modal-body">
                    <h4>Please login to do this 😅</h4>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary text-white" @onclick="OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-success" @onclick="Login">Login</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="modal-backdrop show"></div>

@code {

    [Parameter]
    public Order Order { get; set; } = null!;

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    User? LoggedUser => AuthService.LoggedUser;
    Cart Cart => CartService.Cart;
    List<Flavor>? _flavors;
    List<Topping>? _toppings;
    bool _flavorSelected;

    protected override async Task OnInitializedAsync()
    {
        _flavors = await HttpClient.GetFromJsonAsync<List<Flavor>>($"{NavigationManager.BaseUri}api/flavors");
        _toppings = await HttpClient.GetFromJsonAsync<List<Topping>>($"{NavigationManager.BaseUri}api/toppings");
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async Task SelectFlavor(ChangeEventArgs e)
    {
        if (e.Value!.ToString() == "")
        {
            _flavorSelected = false;
        }
        else
        {
            _flavorSelected = true;
            Order.FlavorId = Guid.Parse(e.Value.ToString()!);
            Order.Flavor = await HttpClient.GetFromJsonAsync<Flavor>($"{NavigationManager.BaseUri}api/flavors/{Order.FlavorId}");
        }
    }

    private async Task AddTopping(ChangeEventArgs e)
    {
        if (e.Value!.ToString() != "")
        {
            var orderTopping = new OrderTopping()
            {
                ToppingId = Guid.Parse(e.Value.ToString()!),
                Topping = await HttpClient.GetFromJsonAsync<Topping>($"{NavigationManager.BaseUri}api/toppings/{e.Value}"),
                OrderListIndex = Cart.Orders!.Count
            };
            Order.Toppings!.Add(orderTopping);
        }
    }

    private void RemoveTopping(OrderTopping topping)
    {
        Order.Toppings!.Remove(topping);
    }

}